//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TerminalsEntities : DbContext
    {
        public TerminalsEntities()
            : base("name=TerminalsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Customers> Customers1 { get; set; }
        public DbSet<ManagersTbl> ManagersTbls { get; set; }
        public DbSet<ProductCustomerTbl> ProductCustomerTbls { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<RoundsCustomerProductTbl> RoundsCustomerProductTbls { get; set; }
        public DbSet<RoundsCustomerTbl> RoundsCustomerTbls { get; set; }
        public DbSet<RoundsTbl> RoundsTbls { get; set; }
        public DbSet<RoundsUserTbl> RoundsUserTbls { get; set; }
        public DbSet<UsersTbl> UsersTbls { get; set; }
        public DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public DbSet<AspNetRole> AspNetRoles { get; set; }
        public DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public DbSet<AspNetUser> AspNetUsers { get; set; }
        public DbSet<ProductCustomerPriceTbl> ProductCustomerPriceTbls { get; set; }
        public DbSet<VitTbl> VitTbls { get; set; }
    
        //public virtual ObjectResult<sp_get_rounds_Result> sp_get_rounds(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endtDate, Nullable<bool> today)
        //{
        //    var startDateParameter = startDate.HasValue ?
        //        new ObjectParameter("startDate", startDate) :
        //        new ObjectParameter("startDate", typeof(System.DateTime));
    
        //    var endtDateParameter = endtDate.HasValue ?
        //        new ObjectParameter("endtDate", endtDate) :
        //        new ObjectParameter("endtDate", typeof(System.DateTime));
    
        //    var todayParameter = today.HasValue ?
        //        new ObjectParameter("today", today) :
        //        new ObjectParameter("today", typeof(bool));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_rounds_Result>("sp_get_rounds", startDateParameter, endtDateParameter, todayParameter);
        //}
    
        //public virtual ObjectResult<sp_get_rounds_by_manager_id_Result> sp_get_rounds_by_manager_id(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endtDate, Nullable<bool> today, Nullable<int> managerId)
        //{
        //    var startDateParameter = startDate.HasValue ?
        //        new ObjectParameter("startDate", startDate) :
        //        new ObjectParameter("startDate", typeof(System.DateTime));
    
        //    var endtDateParameter = endtDate.HasValue ?
        //        new ObjectParameter("endtDate", endtDate) :
        //        new ObjectParameter("endtDate", typeof(System.DateTime));
    
        //    var todayParameter = today.HasValue ?
        //        new ObjectParameter("today", today) :
        //        new ObjectParameter("today", typeof(bool));
    
        //    var managerIdParameter = managerId.HasValue ?
        //        new ObjectParameter("managerId", managerId) :
        //        new ObjectParameter("managerId", typeof(int));
    
        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_rounds_by_manager_id_Result>("sp_get_rounds_by_manager_id", startDateParameter, endtDateParameter, todayParameter, managerIdParameter);
        //}
    }
}
